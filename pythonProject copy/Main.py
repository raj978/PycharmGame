import mathimport randomimport pygame# Next, we need to initialize the pygame module so that we can access all the cool features inside this module.pygame.init()clock = pygame.time.Clock()Screen = pygame.display.set_mode((800, 600))# In this line, we basically assign a variable screen ; the Display method from the Pygame module And that is# to refer the method which is inside the module, we refer to the module we are talking about and then# the name of the method which need to be accessed. . so that it can be used from the Pygame module. The# Display.set_mode method allows us to create a playing window for the game.# The second bracket which has been added is the Tuple, and is necessary. Inside it we enter the height and the width# of the screen. In this window the width is 800 whereas the height is 600.# Title and the Icon of the Gamepygame.display.set_caption("Space Invaders")icon = pygame.image.load('images/Icon.1.png')# We use the image method inside the pygame module. This sentence, just loads the image in pygamepygame.display.set_icon(icon)# THis line, actually makes that loaded image an icon.# Adding PlayersplayerImg = pygame.image.load('images/space-invaders.png')playerX = 370playerY = 500playerX_change = 0# Adding the bulletsbullet1Img = pygame.image.load('images/bullet.png')bullet1X = playerX + 16bullet1Y = 500bullet1Y_change = -10bullet1_stat = "Ready"bullet2Img = pygame.image.load('images/bullet.png')bullet2X = playerX - 16bullet2Y = 500bullet2Y_change = -10bullet2_stat = "Ready"# The ready state refers to the period of time wherein the bullet cannot be seen. The Fire state on the other hand# allows the bullet to be seen# Adding the Background ImagebgImg = pygame.image.load('images/colorful.png')# Adding Background Soundpygame.mixer.music.load('Music/music1.wav')pygame.mixer.music.set_volume(0.09)pygame.mixer.music.play(-1)# Adding the EnemiesEnemyImg1 = pygame.image.load('images/alien.png')enemy1_X = random.randint(100, 700)enemy1_Y = 0enemy1_X_change = random.randrange(3, -3, -6)EnemyImg2 = pygame.image.load('images/Alien_s.png')enemy2_X = random.randint(100, 700)enemy2_Y = random.randrange(0, 200, 4)enemy2_X_change = random.randrange(3, -3, -6)EnemyImg3 = pygame.image.load('images/Alien_ufo.png')enemy3_X = random.randint(100, 700)enemy3_Y = random.randrange(0, 200, 5)enemy3_X_change = random.randrange(3, -3, -6)EnemyImg4 = pygame.image.load('images/walking_ai.png')enemy4_X = random.randint(100, 700)enemy4_Y = 0enemy4_X_change = random.randrange(3, -3, -6)# This is the color of the VisualsYellow = (255, 255, 0)Grey = (128, 128, 128)bgImg2 = pygame.image.load('images/grey1.jpg')bgImg3 = pygame.image.load('images/grey1.jpg')bgImg4 = pygame.image.load('images/grey2.jpg')bgImg5 = pygame.image.load('images/YInverse.png')I5 = 0bgImg6 = pygame.image.load('images/YInverse_L.png')I6 = 0# This is the font in the VisualsFont1 = pygame.font.Font(None, 55)F = 0# This is the Scorescore = 0Font2 = pygame.font.Font('Bernaber.ttf', 40)text2_X = 50text2_Y = 500over = pygame.font.Font('Bernaber.ttf', 60)class button:    def __init__(self, color, x, y, width, height, text=''):        self.color = color        self.x = x        self.y = y        self.width = width        self.height = height        self.text = text    def draw(self, Screen, outline=None):        # This code is used to call the button to the screen        if outline:            pygame.draw.rect(Screen, outline, (self.x - 4, self.y - 4, self.width + 8, self.height + 8))        pygame.draw.rect(Screen, Grey, (self.x, self.y, self.width, self.height))        if self.text != '':            Font3 = pygame.font.Font('Bernaber.ttf', 45)            text3_butt = Font3.render(self.text, 1, Yellow)            Screen.blit(text3_butt, (self.x + (self.width / 2 - text3_butt.get_width() / 2), self.y + (self.height / 2 - text3_butt.get_height() / 2)))    def isOver(self, pos):        # This code is used to check the position of the mouse - and that is stored in 'pos'        if pos[0] > self.x and pos[0] < self.x + self.width:            if pos[1] > self.y and pos[1] < self.y + self.height:                return True        return Falsedef game_over():    text3 = over.render("Game Over", True, Yellow)    Screen.blit(text3, (200, 300))    finalbutton.draw(Screen, Yellow)def isCollision1(enemy1_X, enemy1_Y, bullet1X, bullet1Y):    distance1 = math.sqrt(math.pow(enemy1_X - bullet1X, 2) + math.pow(enemy1_Y - bullet1Y, 2))    if distance1 < 27:        return True    else:        return Falsedef isCollision2(enemy1_X, enemy1_Y, bullet2X, bullet2Y):    distance2 = math.sqrt(math.pow(enemy1_X - bullet2X, 2) + math.pow(enemy1_Y - bullet2Y, 2))    if distance2 < 27:        return True    else:        return Falsedef isCollision3(enemy2_X, enemy2_Y, bullet1X, bullet1Y):    distance3 = math.sqrt(math.pow(enemy2_X - bullet1X, 2) + math.pow(enemy2_Y - bullet1Y, 2))    if distance3 < 27:        return True    else:        return Falsedef isCollision4(enemy2_X, enemy2_Y, bullet2X, bullet2Y):    distance4 = math.sqrt(math.pow(enemy2_X - bullet2X, 2) + math.pow(enemy2_Y - bullet2Y, 2))    if distance4 < 27:        return True    else:        return Falsedef isCollision5(enemy3_X, enemy3_Y, bullet1X, bullet1Y):    distance5 = math.sqrt(math.pow(enemy3_X - bullet1X, 2) + math.pow(enemy3_Y - bullet1Y, 2))    if distance5 < 27:        return True    else:        return Falsedef isCollision6(enemy3_X, enemy3_Y, bullet2X, bullet2Y):    distance6 = math.sqrt(math.pow(enemy3_X - bullet2X, 2) + math.pow(enemy3_Y - bullet2Y, 2))    if distance6 < 27:        return True    else:        return Falsedef isCollision7(enemy4_X, enemy4_Y, bullet1X, bullet1Y):    distance7 = math.sqrt(math.pow(enemy4_X - bullet1X, 2) + math.pow(enemy4_Y - bullet1Y, 2))    if distance7 < 27:        return True    else:        return Falsedef isCollision8(enemy4_X, enemy4_Y, bullet2X, bullet2Y):    distance8 = math.sqrt(math.pow(enemy4_X - bullet2X, 2) + math.pow(enemy4_Y - bullet2Y, 2))    if distance8 < 27:        return True    else:        return Falsedef bullet1(x, y):    Screen.blit(bullet1Img, (x, y))def bullet2(x, y):    Screen.blit(bullet2Img, (x, y))def player(x, y):    Screen.blit(playerImg, (x, y))    # The Screen.blit method is used to draw on the Pygame window. This line also defines a play, and is important    # to notedef bullet_fire1(x, y):    global bullet1_stat    bullet1_stat = "Fire"    Screen.blit(bullet1Img, (x + 16, y + 10))def bullet_fire2(x, y):    global bullet2_stat    bullet2_stat = "Fire"    Screen.blit(bullet2Img, (x - 16, y + 10))    # We add x 16, so that the bullet appears from the right center of the ship, whereas, a + 10 is added to create an    # illusion that the bullet is being shot from in front of the space ship and not from its nose.def cap_img1(x, y):    Screen.blit(bgImg2, (x, y))def cap_img2(x, y):    Screen.blit(bgImg3, (x, y))def cap_img3(x, y):    Screen.blit(bgImg5, (x, y))def cap_img4(x, y):    Screen.blit(bgImg6, (x, y))def draw_sprites():    # This is for the Right Arrow    pygame.draw.line(Screen, Yellow, (680, 500), (730, 500), 5)    pygame.draw.line(Screen, Yellow, (710, 480), (730, 500), 4)    pygame.draw.line(Screen, Yellow, (710, 520), (730, 500), 4)    # This is the bounding box of the Right arrow    pygame.draw.line(Screen, Yellow, (670, 475), (740, 475), 4)    pygame.draw.line(Screen, Yellow, (670, 525), (740, 525), 4)    pygame.draw.line(Screen, Yellow, (670, 475), (670, 525), 4)    pygame.draw.line(Screen, Yellow, (740, 475), (740, 525), 4)    # This is the Bounding box for the Left Arrow    pygame.draw.line(Screen, Yellow, (570, 475), (640, 475), 4)    pygame.draw.line(Screen, Yellow, (570, 525), (640, 525), 4)    pygame.draw.line(Screen, Yellow, (570, 475), (570, 525), 4)    pygame.draw.line(Screen, Yellow, (640, 475), (640, 525), 4)    # This is the Left Arrow    pygame.draw.line(Screen, Yellow, (580, 500), (630, 500), 5)    pygame.draw.line(Screen, Yellow, (600, 480), (580, 500), 4)    pygame.draw.line(Screen, Yellow, (600, 520), (580, 500), 4)    # This is the space Bar    pygame.draw.rect(Screen, Grey, [570, 400, 170, 50])    text1 = Font1.render("Space", True, Yellow)    Screen.blit(text1, (600, 407))    # Boundaries of the Space Bar    pygame.draw.line(Screen, Yellow, (570, 400), (740, 400), 4)    pygame.draw.line(Screen, Yellow, (570, 450), (740, 450), 4)    pygame.draw.line(Screen, Yellow, (570, 400), (570, 450), 4)    pygame.draw.line(Screen, Yellow, (740, 400), (740, 450), 4)def space():    # This is the space Bar    pygame.draw.rect(Screen, Yellow, [570, 400, 170, 50])    text1 = Font1.render("Space", True, Grey)    Screen.blit(text1, (600, 407))    # Boundaries of the Space Bar    pygame.draw.line(Screen, Grey, (570, 400), (740, 400), 4)    pygame.draw.line(Screen, Grey, (570, 450), (740, 450), 4)    pygame.draw.line(Screen, Grey, (570, 400), (570, 450), 4)    pygame.draw.line(Screen, Grey, (740, 400), (740, 450), 4)def score_show(x, y):    # This is the Text    text2 = Font2.render("Score : " + str(score), True, Yellow)    Screen.blit(text2, (x, y))def enemy1(x, y):    Screen.blit(EnemyImg1, (x, y))def enemy2(x, y):    Screen.blit(EnemyImg2, (x, y))def enemy3(x, y):    Screen.blit(EnemyImg3, (x, y))def enemy4(x, y):    Screen.blit(EnemyImg4, (x, y))finalbutton = button((255, 69, 0), 300, 200, 200, 70, ' Restart ')# The lines of code below, show the close Functionalityrunning = Truewhile running:    Screen.fill((0, 0, 0))    # Giving the screen a colour by using the Screen fill under the While loop, so that the Pygame    # window has a color, we have also included a tuple here to enter RGB values.    Screen.blit(bgImg, (0, 0))    for event in pygame.event.get():        if event.type == pygame.QUIT:            running = False            # This line is used to create a Quit Event in the Pygame Window,            # An event is any action that takes place inside a window.            # Here the pygame keep checking whether the Quit has been pressed,            # and whenever it has been pressed, it quits the working.            # If a keystroke is pressed, check whether it is left or Right. And then move the sprite according to            # that        if event.type == pygame.KEYDOWN:            if event.key == pygame.K_LEFT:                playerX_change = -5                I5 = 1            if event.key == pygame.K_RIGHT:                playerX_change = 5                I6 = 1            if event.key == pygame.K_SPACE:                F = 1                if bullet1_stat == "Ready":                    bullet_Sound = pygame.mixer.Sound('Music/laser.wav')                    bullet_Sound.play()                    bullet1X = playerX                    bullet_fire1(bullet1X, bullet1Y)                if bullet2_stat == "Ready":                    bullet2X = playerX                    bullet_fire2(bullet2X, bullet2Y)        if event.type == pygame.KEYUP:            if event.key == pygame.K_LEFT:                playerX_change = 0                I5 = -1            if event.key == pygame.K_RIGHT:                playerX_change = 0                I6 = -1            if event.key == pygame.K_SPACE:                F = -1    # In this line of code, we are adding or subtracting from the current x position of the sprite, which is 370    playerX += playerX_change    # This is all the Extra Visual elements that are being drawn on the Screen:    # This is the background of the Keys:    cap_img1(670, 475)    cap_img2(570, 475)    # This is the function that makes all the extra visuals in the game    draw_sprites()    score_show(text2_X, text2_Y)    if F == 1:        space()    if I5 == 1:        cap_img3(570, 475)    if I6 == 1:        cap_img4(670, 475)    if playerX <= 0:        playerX = 0    elif playerX >= 736:        playerX = 736        # Collision    collision1 = isCollision1(enemy1_X, enemy1_Y, bullet1X, bullet1Y)    collision2 = isCollision2(enemy1_X, enemy1_Y, bullet2X, bullet2Y)    if collision1 and collision2:        expl_sound = pygame.mixer.Sound('Music/explosion.wav')        expl_sound.play()        bullet1X = playerX + 16        bullet1Y = 500        bullet1Y_change = -10        bullet1_stat = "Ready"        bullet2X = playerX - 16        bullet2Y = 500        bullet2Y_change = -10        bullet2_stat = "Ready"        enemy1_X = 1        enemy1_Y = 200        enemy1_X_change = 3        score += 1    collision3 = isCollision3(enemy2_X, enemy2_Y, bullet1X, bullet1Y)    collision4 = isCollision4(enemy2_X, enemy2_Y, bullet2X, bullet2Y)    if collision3 and collision4:        expl_sound = pygame.mixer.Sound('Music/explosion.wav')        expl_sound.play()        bullet1X = playerX + 16        bullet1Y = 500        bullet1Y_change = -10        bullet1_stat = "Ready"        bullet2X = playerX - 16        bullet2Y = 500        bullet2Y_change = -10        bullet2_stat = "Ready"        enemy2_X = random.randint(100, 700)        enemy2_Y = random.randrange(0, 200, 4)        enemy2_X_change = random.randrange(3, -3, -6)        score += 1    collision5 = isCollision5(enemy3_X, enemy3_Y, bullet1X, bullet1Y)    collision6 = isCollision6(enemy3_X, enemy3_Y, bullet2X, bullet2Y)    if collision5 and collision6:        expl_sound = pygame.mixer.Sound('Music/explosion.wav')        expl_sound.play()        bullet1X = playerX + 16        bullet1Y = 500        bullet1Y_change = -10        bullet1_stat = "Ready"        bullet2X = playerX - 16        bullet2Y = 500        bullet2Y_change = -10        bullet2_stat = "Ready"        enemy3_X = 200        enemy3_Y = 100        enemy3_X_change = random.randrange(3, -3, -6)        score += 1    collision7 = isCollision7(enemy4_X, enemy4_Y, bullet1X, bullet1Y)    collision8 = isCollision8(enemy4_X, enemy4_Y, bullet2X, bullet2Y)    if collision7 and collision8:        expl_sound = pygame.mixer.Sound('Music/explosion.wav')        expl_sound.play()        bullet1X = playerX + 16        bullet1Y = 500        bullet1Y_change = -10        bullet1_stat = "Ready"        bullet2X = playerX - 16        bullet2Y = 500        bullet2Y_change = -10        bullet2_stat = "Ready"        enemy4_X = 300        enemy4_Y = 20        enemy4_X_change = random.randrange(3, -3, -6)        score += 1    # Bullet Movement    if bullet1Y <= -10:        bullet1Y = playerY        bullet1_stat = "Ready"    if bullet1_stat == "Fire":        bullet_fire1(bullet1X, bullet1Y)        bullet1Y += bullet1Y_change    if bullet2Y <= -10:        bullet2Y = playerY        bullet2_stat = "Ready"    if bullet2_stat == "Fire":        bullet_fire2(bullet2X, bullet2Y)        bullet2Y += bullet2Y_change    if enemy1_X <= -64:        enemy1_X_change = 3        enemy1_Y += 60    if enemy1_X >= 800:        enemy1_X_change = -3        enemy1_Y += 60    if enemy2_X <= -64 and enemy2_Y >= 25:        enemy2_X_change = 3        enemy2_Y += random.randint(0, 50)    if enemy2_X >= 800 and enemy2_Y >= 25:        enemy2_X_change = -3        enemy2_Y += random.randint(0, 120)    if enemy3_X <= -64 and enemy3_Y >= 25:        enemy3_X_change = 3        enemy3_Y += random.randint(0, 100)    if enemy3_X >= 800 and enemy3_Y >= 25:        enemy3_X_change = -3        enemy3_Y += random.randint(0, 100)    if enemy4_X <= -64:        enemy4_X_change = 3        enemy4_Y += 60    if enemy4_X >= 800:        enemy4_X_change = -3        enemy4_Y += 60    if enemy1_Y >= 400:        for a in range(6):            enemy1_Y = 2000            enemy2_Y = 2000            enemy3_Y = 2000            enemy4_Y = 2000            game_over()            pygame.mixer.music.pause()            break    if enemy2_Y >= 400:        for b in range(6):            enemy1_Y = 2000            enemy2_Y = 2000            enemy3_Y = 2000            enemy4_Y = 2000            game_over()            pygame.mixer.music.pause()            break    if enemy3_Y >= 400:        for c in range (6):            enemy1_Y = 2000            enemy2_Y = 2000            enemy3_Y = 2000            enemy4_Y = 2000            game_over()            pygame.mixer.music.pause()            break    if enemy4_Y >= 400:        for d in range(6):            enemy1_Y = 2000            enemy2_Y = 2000            enemy3_Y = 2000            enemy4_Y = 2000            game_over()            pygame.mixer.music.pause()            break    for event in pygame.event.get():        pos = pygame.mouse.get_pos()        if event.type == pygame.MOUSEBUTTONDOWN:            if finalbutton.isOver(pos):                pygame.mixer_music.unpause()                enemy1_Y = 0                enemy2_Y = random.randrange(0, 200, 4)                enemy3_Y = random.randrange(0, 200, 5)                enemy4_Y = 0                enemy1_X_change = random.randrange(3, -3, -6)                enemy2_X_change = random.randrange(3, -3, -6)                enemy3_X_change = random.randrange(3, -3, -6)                enemy4_X_change = random.randrange(3, -3, -6)    enemy1_X += enemy1_X_change    enemy2_X += enemy2_X_change    enemy3_X += enemy3_X_change    enemy4_X += enemy4_X_change    player(playerX, playerY)    enemy1(enemy1_X, enemy1_Y)    enemy2(enemy2_X, enemy2_Y)    enemy3(enemy3_X, enemy3_Y)    enemy4(enemy4_X, enemy4_Y)    pygame.display.update()    clock.tick(10000)    # We update the pygame window, to make sure that it acomodates all the changes that are taking    # place in the window